{"name":"Fuelphp-filter","tagline":"Implements a WordPress like filters system utilizing the event class logic","body":"Filter\r\n======\r\n\r\nWordPress like filter system for FuelPHP utilizing the core Event class.\r\n\r\nInstallation\r\n------------\r\n\r\n### Using oil\r\n1. cd to your fuel project's root\r\n2. Run `php oil package install filter`\r\n3. Optionally edit fuel/packages/filter/config/filter.php (this file allows you to add filters from the config file, but use the package where and when you want)\r\n4. Add 'filter' to the 'always_load/packages' array in app/config/config.php (or call `Fuel::add_package('filter')` whenever you want to use it).\r\n5. Enjoy :)\r\n\r\n### Manual (may be more up-to-date)\r\n1. Clone (`git clone git://github.com/leemason/fuelphp-filter`) / [download](https://github.com/leemason/fuelphp-filter/zipball/master)\r\n2. Stick in fuel/packages/ (or any custom package location you have setup)\r\n3. Optionally edit fuel/packages/filter/config/filter.php (this file allows you to add filters from the config file, but use the package where and when you want)\r\n4. Add 'filter' to the 'always_load/packages' array in app/config/config.php (or call `Fuel::add_package('filter')` whenever you want to use it).\r\n5. Enjoy :)\r\n\r\nIf you don't want to change the config file in `fuel/packages/filter/config/filter.php`, you can create your own config file in `fuel/app/config/filter.php`.\r\nYou can either copy the entirely of the original config file, or just override the keys as you like.\r\nThe magic of Fuel's `Config` class takes care of the rest.\r\n\r\nIntroduction\r\n------------\r\n\r\nFilter is a WordPress like filter system for managing vars. It boasts the following features:\r\n\r\n- Custom instances can be created.\r\n- Passed values can be anything sensible.\r\n- Filters can be added/removed.\r\n- Filters are used in the order they are added (the opposite of the core Event class, but of course can be overwritten when triggering).\r\n\r\nBasic usage\r\n-----------\r\n\r\nFilter works just like the core Event class, with 2 subtle differences:\r\n\r\n1. Filters are run in the order they are added*\r\n2. ```phpFilter::trigger()``` will return the result from the hooked functions (or closures).\r\n\r\n* This can be \"reversed\" just like the core Event class to run the filters in reverse order.\r\n\r\n**IMPORTANT** All methods sent the filter event should return its data.\r\n\r\nFor full reference please see the Event class docs here: http://fuelphp.com/docs/classes/event.html\r\n\r\nRegistering filter methods is easy, they can be closures, or callbacks just like the core Event class:\r\n\r\n```php\r\nFilter::register('filtername', function($data){\r\n    //do something here\r\n    $data['filter1'] = 'somedata';\r\n    return $data;\r\n});\r\n\r\nFilter::register('filtername', function($data){\r\n    //do something else here\r\n    //maybe unset a result set above?\r\n    unset($data['filter1']);\r\n    return $data;\r\n});\r\n```\r\n\r\nTriggering is again the same as the core Event, you can pass any data:\r\n\r\n```php\r\n$result = Filter::trigger($filtername, $data, $reverse);\r\n\r\n//result is an array\r\n$result = Filter::trigger('filtername', array('some' => 'data'));\r\n\r\n//result is a string\r\n$result = Filter::trigger('filtername', 'this is a string being passed and reversed too!', true);\r\n```\r\n\r\n\r\nThanks\r\n------\r\n\r\nThe following people have helped Casset become what it is, so thank you!\r\n\r\n - [FuelPHP](https://fuelphp.com)\r\n\r\nContributing\r\n------------\r\n\r\nIf you've got any issues/complaints/suggestions, please tell me and I'll do my best!\r\n\r\nPull requests are also gladly accepted.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}